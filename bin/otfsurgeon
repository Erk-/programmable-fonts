#!/usr/bin/env python3
import argparse
import re
import sys

from fontTools.misc.testTools import getXML
from fontTools.ttLib import TTFont, newTable

parser = argparse.ArgumentParser(description="Cut up and rebuild OTF files")
parser.add_argument(
    "-i", dest="input", metavar="OTF", help="Input file name", required=True
)

subparsers = parser.add_subparsers(dest="command", required=True)
parser_strip = subparsers.add_parser("strip", help="Remove one or more tables")
parser_strip.add_argument("-o", dest="output", metavar="OTF", help="Output file name")
parser_strip.add_argument("tables", nargs="*")

parser_dump = subparsers.add_parser("dump", help="Print table contents to stdout")
parser_dump.add_argument(
    "--ttx", dest="ttx", action="store_true", help="Output should be XML, not binary",
)
parser_dump.add_argument("table", action="store")

parser_add = subparsers.add_parser(
    "add", help="Add a binary table to the font from standard input"
)
parser_add.add_argument("-o", dest="output", metavar="OTF", help="Output file name")
parser_add.add_argument("table", action="store")

parser_steal = subparsers.add_parser(
    "steal", help="Copy one or more tables from another font"
)
parser_steal.add_argument("-o", dest="output", metavar="OTF", help="Output file name")
parser_steal.add_argument("fromotf", metavar="FROM_OTF")
parser_steal.add_argument("tables", nargs="*")

args = parser.parse_args()
font = TTFont(args.input)


def strip():
    if not args.output:
        args.output = re.sub(r"(\..*?)$", r"-strip\1", args.input)

    for t in args.tables:
        if t in font:
            del font[t]
        else:
            print("%s table not found in %s" % (t, args.input), file=sys.stderr)

    print("Writing on %s" % args.output)
    font.save(args.output)


def dump():
    if args.table not in font:
        print("%s table not found in %s" % (args.table, args.input), file=sys.stderr)
        sys.exit(1)
    if args.ttx:
        print("\n".join(getXML(font[args.table].toXML)))
    else:
        sys.stdout.buffer.write(font[args.table].compile(font))


def steal():
    other = TTFont(args.fromotf)
    if not args.output:
        args.output = re.sub(r"(\..*?)$", r"-steal\1", args.input)
    for t in args.tables:
        if t in other:
            font[t] = other[t]
        else:
            print("%s table not found in %s" % (t, args.fromotf), file=sys.stderr)

    print("Writing on %s" % args.output)
    try:
        font.save(args.output)
    except Exception as e:
        exception = type(e).__name__
        print("Can't steal those tables: %s: %s" % (exception, e), file=sys.stderr)
        if exception == "KeyError":
            print("\t(Often this means you don't have the required glyphs in the font)")
        sys.exit(1)


def add():
    if not args.output:
        args.output = re.sub(r"(\..*?)$", r"-add\1", args.input)
    data = sys.stdin.buffer.read()
    font[args.table] = newTable(args.table)
    font[args.table].decompile(data, font)

    print("Writing on %s" % args.output)
    try:
        font.save(args.output)
    except Exception as e:
        exception = type(e).__name__
        print("Can't add that table: %s: %s" % (exception, e), file=sys.stderr)
        if exception == "KeyError":
            print("\t(Often this means you don't have the required glyphs in the font)")
        sys.exit(1)


globals()[args.command]()  # Whoa
